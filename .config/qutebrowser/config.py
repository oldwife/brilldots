## Autogenerated config.py
##
## NOTE: config.py is intended for advanced users who are comfortable
## with manually migrating the config file on qutebrowser upgrades. If
## you prefer, you can also configure qutebrowser using the
## :set/:bind/:config-* commands without having to write a config.py
## file.
##
## Documentation:
##   qute://help/configuring.html
##   qute://help/settings.html

## This is here so configs done via the GUI are still loaded.
## Remove it to not load settings done via the GUI.
config.load_autoconfig(False)
c.content.media.audio_capture = True
c.content.media.audio_video_capture = True
c.content.media.video_capture = True

## Duration (in milliseconds) to wait before removing finished downloads.
## If set to -1, downloads are never removed.
## Type: Int
c.downloads.remove_finished = 1000

## Default font families to use. Whenever "default_family" is used in a
## font setting, it's replaced with the fonts listed here. If set to an
## empty value, a system-specific monospace default is used.
## Type: List of Font, or Font
c.fonts.default_family = 'misc tamsyn'
#c.fonts.default_family = 'Cartograph CF'
#c.fonts.default_family = 'Input'

## Default font size to use. Whenever "default_size" is used in a font
## setting, it's replaced with the size listed here. Valid values are
## either a float value with a "pt" suffix, or an integer value with a
## "px" suffix.
## Type: String
c.fonts.default_size = '11pt'

## Which cookies to accept. With QtWebEngine, this setting also controls
## other features with tracking capabilities similar to those of cookies;
## including IndexedDB, DOM storage, filesystem API, service workers, and
## AppCache. Note that with QtWebKit, only `all` and `never` are
## supported as per-domain values. Setting `no-3rdparty` or `no-
## unknown-3rdparty` per-domain on QtWebKit will have the same effect as
## `all`.
## Type: String
## Valid values:
##   - all: Accept all cookies.
##   - no-3rdparty: Accept cookies from the same origin only. This is known to break some sites, such as GMail.
##   - no-unknown-3rdparty: Accept cookies from the same origin only, unless a cookie is already set for the domain. On QtWebEngine, this is the same as no-3rdparty.
##   - never: Don't accept cookies at all.
c.content.cookies.accept = 'all'

## Allow websites to show notifications.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
c.content.notifications.enabled = False

## Allow websites to register protocol handlers via
## `navigator.registerProtocolHandler`.
## Type: BoolAsk
## Valid values:
##   - true
##   - false
##   - ask
c.content.register_protocol_handler = True

## Position of the status bar.
## Type: VerticalPosition
## Valid values:
##   - top
##   - bottom
# c.statusbar.position = 'bottom'
## Font used for the hints.
## Type: Font
c.fonts.hints = 'bold default_size default_family'

## Characters used for hint strings.
## Type: UniqueCharString
c.hints.chars = 'asdfghjkl'

## Padding (in pixels) for hints.
## Type: Padding
c.hints.padding = {'top': 5, 'bottom': 5, 'left': 5, 'right': 5}

## Comma-separated list of regular expressions to use for 'prev' links.
## Type: List of Regex
# c.hints.prev_regexes = ['\\bprev(ious)?\\b', '\\bback\\b', '\\bolder\\b', '\\b[<←≪]\\b', '\\b(<<|«)\\b']

## Rounding radius (in pixels) for the edges of hints.
## Type: Int
c.hints.radius = 10

## When/how to show the scrollbar.
## Type: String
## Valid values:
##   - always: Always show the scrollbar.
##   - never: Never show the scrollbar.
##   - when-searching: Show the scrollbar when searching for text in the webpage. With the QtWebKit backend, this is equal to `never`.
##   - overlay: Show an overlay scrollbar. With Qt < 5.11 or on macOS, this is unavailable and equal to `when-searching`; with the QtWebKit backend, this is equal to `never`. Enabling/disabling overlay scrollbars requires a restart.
c.scrolling.bar = 'never'

## Padding (in pixels) for the statusbar.
## Type: Padding
c.statusbar.padding = {'top': 10, 'bottom': 1, 'left': 15, 'right': 15}

## When to show the statusbar.
## Type: String
## Valid values:
##   - always: Always show the statusbar.
##   - never: Always hide the statusbar.
##   - in-mode: Show the statusbar when in modes other than normal mode.
c.statusbar.show = 'in-mode'

## List of widgets displayed in the statusbar.
## Type: List of String
## Valid values:
##   - url: Current page URL.
##   - scroll: Percentage of the current page position like `10%`.
##   - scroll_raw: Raw percentage of the current page position like `10`.
##   - history: Display an arrow when possible to go back/forward in history.
##   - tabs: Current active tab, e.g. `2`.
##   - keypress: Display pressed keys when composing a vi command.
##   - progress: Progress bar for the current page loading.
c.statusbar.widgets = ['keypress']

## When to show favicons in the tab bar.
## Type: String
## Valid values:
##   - always: Always show favicons.
##   - never: Always hide favicons.
##   - pinned: Show favicons only on pinned tabs.
c.tabs.favicons.show = 'never'

## Padding (in pixels) for tab indicators.
## Type: Padding
c.tabs.indicator.padding = {'top': 2, 'bottom': 2, 'left': 15, 'right': 15}

## Width (in pixels) of the progress indicator (0 to disable).
## Type: Int
c.tabs.indicator.width = 0

## When switching tabs, what input mode is applied.
## Type: String
## Valid values:
##   - persist: Retain the current mode.
##   - restore: Restore previously saved mode.
##   - normal: Always revert to normal mode.
c.tabs.mode_on_change = 'persist'

## Padding (in pixels) around text for tabs.
## Type: Padding
c.tabs.padding = {'top': 4, 'bottom': 4, 'left': 15, 'right': 15}

## Position of the tab bar.
## Type: Position
## Valid values:
##   - top
##   - bottom
##   - left
##   - right
c.tabs.position = 'bottom'

## When to show the tab bar.
## Type: String
## Valid values:
##   - always: Always show the tab bar.
##   - never: Always hide the tab bar.
##   - multiple: Hide the tab bar if only one tab is open.
##   - switching: Show the tab bar when switching tabs.
c.tabs.show = 'multiple'

## Default zoom level.
## Type: Perc
c.zoom.default = '100%'

## Available zoom levels.
## Type: List of Perc
c.zoom.levels = ['25%', '33%', '50%', '67%', '75%', '90%', '100%','110%','120%','130%','140%', '150%', '200%', '250%', '300%', '400%', '500%']

config.bind('+', 'zoom-in')
config.bind('=', 'zoom')
config.bind('-', 'zoom-out')
config.bind('m', 'hint links spawn umpv --detach --hwdex=API {hint-url}')
config.bind('M', 'hint links spawn umpv {hint-url}')

import json
import os

qutewal_dynamic_loading = False

home = os.getenv('HOME')
colors_relative = '.cache/wal/colors.json'
daemon_relative = '.config/qutebrowser/iqutefy.py'
colors_absolute = os.path.join(home, colors_relative)
daemon_absolute = os.path.join(home, daemon_relative)
#bg = colors['colors']['color5']

if os.path.isfile(colors_absolute):
    with open(colors_absolute) as colorfile:
        colors = json.load(colorfile)

    # Background color of the completion widget category headers.
    # Type: QssColor
    c.colors.completion.category.bg = colors['special']['background']

    # border color of the completion widget category headers.
    c.colors.completion.category.border.bottom = colors['special']['background']
    c.colors.completion.category.border.top = colors['special']['background']

    # Foreground color of completion widget category headers.
    # Type: QtColor
    c.colors.completion.category.fg = colors['colors']['color6']

    # Background color of the completion widget for even/odd rows.
    c.colors.completion.even.bg = colors['special']['background']
    c.colors.completion.odd.bg = colors['special']['background']

    # Text color of the completion widget.
    c.colors.completion.fg = colors['special']['foreground']

    # Bottom border color of the selected completion item.
    # Type: QssColor
    c.colors.completion.item.selected.border.bottom = colors['special']['background']

    # Top border color of the completion widget category headers.
    # Type: QssColor
    c.colors.completion.item.selected.border.top = colors['special']['background']

    # color of the completion item.
    # Type: QtColor
    c.colors.completion.item.selected.bg = colors['special']['background']
    c.colors.completion.item.selected.fg = colors['colors']['color13']

    # Foreground color of the matched text in the completion.
    # Type: QssColor
    c.colors.completion.match.fg = colors['colors']['color3']

    # Color of the scrollbar in completion view
    # Type: QssColor
    c.colors.completion.scrollbar.bg = colors['special']['background']

    # Color of the scrollbar handle in completion view.
    # Type: QssColor
    c.colors.completion.scrollbar.fg = colors['special']['foreground']

    # Background color for the download bar.
    # Type: QssColor
    c.colors.downloads.bar.bg = colors['special']['background']

    # Background color for downloads with errors.
    # Type: QtColor
    c.colors.downloads.error.bg = colors['colors']['color2']

    # Foreground color for downloads with errors.
    # Type: QtColor
    c.colors.downloads.error.fg = colors['special']['foreground']

    # Color gradient stop for download backgrounds.
    # Type: QtColor
    c.colors.downloads.stop.bg = colors['colors']['color6']

    # Color gradient interpolation system for download backgrounds.
    c.colors.downloads.system.bg = 'none'

    # Background color for hints. Note that you can use a `rgba(...)` value
    # for transparency.
    # Type: QssColor
    c.colors.hints.bg = colors['special']['background']
    #  c.colors.hints.bg = 'rgba(255, 247, 133, 0)'
  

    ## CSS border value for hints.
    c.hints.border = colors['colors']['color2']
   
    # Font color for hints.
    # Type: QssColor
    c.colors.hints.fg = colors['colors']['color4']
    c.colors.hints.match.fg = colors['colors']['color1']

    # Background color of the keyhint widget.
    # Type: QssColor
    c.colors.keyhint.bg = colors['special']['background']

    # Text color for the keyhint widget.
    # Type: QssColor
    c.colors.keyhint.fg = colors['special']['foreground']

    # Highlight color for keys to complete the current keychain.
    # Type: QssColor
    c.colors.keyhint.suffix.fg = colors['colors']['color3']

    # color of an error message.
    c.colors.messages.error.bg = colors['colors']['color5']
    c.colors.messages.error.border = colors['colors']['color5']
    c.colors.messages.error.fg = colors['special']['foreground']

    # color of an info message.
    c.colors.messages.info.bg = colors['special']['background']
    c.colors.messages.info.border = colors['special']['background']
    c.colors.messages.info.fg = colors['colors']['color1']

    # color of a warning message.
    c.colors.messages.warning.bg = colors['colors']['color1']
    c.colors.messages.warning.border = colors['colors']['color1']
    c.colors.messages.warning.fg = colors['special']['foreground']

    # color for prompts.
    c.colors.prompts.bg = colors['special']['background']
    c.colors.prompts.fg = colors['colors']['color6']

    #Border used around UI elements in prompts.
    c.colors.prompts.border = '1px solid ' + colors['special']['background']

    # Background color for the selected item in filename prompts.
    c.colors.prompts.selected.bg = colors['colors']['color5']

    # color of the statusbar in caret mode.
    c.colors.statusbar.caret.bg = colors['colors']['color6']
    c.colors.statusbar.caret.fg = colors['special']['cursor']

    # color of the statusbar in caret mode with a selection.
    c.colors.statusbar.caret.selection.bg = colors['colors']['color6']
    c.colors.statusbar.caret.selection.fg = colors['special']['foreground']

    # color of the statusbar in command mode.
    c.colors.statusbar.command.bg = colors['special']['background']
    c.colors.statusbar.command.fg = colors['special']['foreground']

    # color of the statusbar in private browsing + command mode.
    c.colors.statusbar.command.private.bg = colors['special']['background']
    c.colors.statusbar.command.private.fg = colors['special']['foreground']

    # color of the statusbar in insert mode.
    c.colors.statusbar.insert.bg = colors['special']['background']
    c.colors.statusbar.insert.fg = colors['colors']['color2']

    # color of the statusbar.
    c.colors.statusbar.normal.bg = colors['special']['background']
    c.colors.statusbar.normal.fg = colors['special']['foreground']

    # color of the statusbar in passthrough mode.
    c.colors.statusbar.passthrough.fg = colors['colors']['color4']
    c.colors.statusbar.passthrough.bg = colors['special']['background']

    # color of the statusbar in private browsing mode.
    c.colors.statusbar.private.bg = colors['special']['background']
    c.colors.statusbar.private.fg = colors['special']['foreground']

    # Background color of the progress bar.
    c.colors.statusbar.progress.bg = colors['special']['foreground']

    # Foreground color of the URL in the statusbar on error.
    c.colors.statusbar.url.error.fg = colors['colors']['color5']

    # Default foreground color of the URL in the statusbar.
    c.colors.statusbar.url.fg = colors['special']['foreground']

    # Foreground color of the URL in the statusbar for hovered links.
    c.colors.statusbar.url.hover.fg = colors['colors']['color4']

    # Foreground color of the URL in the statusbar on successful load
    c.colors.statusbar.url.success.http.fg = colors['special']['foreground']
    c.colors.statusbar.url.success.https.fg = colors['colors']['color2']

    # Foreground color of the URL in the statusbar when there's a warning.
    c.colors.statusbar.url.warn.fg = colors['colors']['color1']

    # Background color of the tab bar.
    c.colors.tabs.bar.bg = colors['special']['background']

    # Color for the tab indicator on errors.
    c.colors.tabs.indicator.error = colors['colors']['color5']

    # Color gradient interpolation system for the tab indicator.
    c.colors.tabs.indicator.system = 'none'

#========== tab colors. ==========#

    # color of unselected even&odd tabs.
    c.colors.tabs.even.bg = colors['special']['background']
    c.colors.tabs.even.fg = colors['colors']['color7']
    c.colors.tabs.odd.bg = colors['special']['background']
    c.colors.tabs.odd.fg = colors['colors']['color7']

    # color of selected even&odd tabs.
    c.colors.tabs.selected.even.bg = colors['special']['background']
    c.colors.tabs.selected.even.fg = colors['colors']['color11']
    c.colors.tabs.selected.odd.bg = colors['special']['background']
    c.colors.tabs.selected.odd.fg = colors['colors']['color11']

    # Background color for webpages if unset (or empty to use the theme's
    # color)
    # Type: QtColor
#    c.colors.webpage.bg = colors['special']['background']

    if qutewal_dynamic_loading or bool(os.getenv('QUTEWAL_DYNAMIC_LOADING')):
        import signal
        import subprocess
        import prctl

        # start iqutefy to refresh colors on the fly
        iqutefyd = subprocess.Popen(
            [daemon_absolute, colors_absolute],
            preexec_fn=lambda: prctl.set_pdeathsig(signal.SIGTERM))
