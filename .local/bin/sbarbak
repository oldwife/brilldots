#!/bin/env sh
# INIT
printf "$$" > ~/.cache/pidofbar
sec=0

# MODULES
#update_cpu () { 
#	cpu="$(grep -o "^[^ ]*" /proc/loadavg )" 
#}

#update_memory () { 
#	memory="$(free -h | sed -n "2s/\([^ ]* *\)\{2\}\([^ ]*\).*/\2/p")"
#}

source ~/.cache/wal/colors.sh
update_time () { 
	time="$(date '+%H:%M')" 
}

#update_weather () { 
#	weather="$(curl -s "wttr.in?format=1"| sed -E "s/^(.).*\+/\1/")" 
#}

#update_bat () { 
#	# you might need to change the path depending on your device
#	read -r bat_status </sys/class/power_supply/BAT0/status
#	read -r bat_capacity </sys/class/power_supply/BAT0/capacity
#	be="$( printf '%x\n' $bat_capacity )"
#	if [[ $bat_capacity -ge "80" ]]; then be='#'
#	fi
#	if [[ $bat_status = "Charging" ]]; then ch='#'
#	fi
#	bat="$ch$be"
#}

update_bat () { 
ad=$(acpi -a | grep -wo "on-line\|off-line")
bp=$(acpi -b | grep "Battery 0" | grep -o '[0-9]\+%' | tr -d '%')
be="$( printf '%x\n' $bp )"

if [[ $bp -ge "80" ]]; then be='#'
fi
if [[ $ad = "on-line" ]]; then ch='#'
else ch='<'
fi
	bat="$ch$be"
}

update_vol () { 
volume=$( pamixer --get-volume)
volumefix=$( printf '%x\n' $volume )
mute=$([ "$(pamixer --get-mute)" = "false" ] && printf '*' || printf '$')

if [[ $volume = "0" ]]; then volumefix="$"
fi

vol="$mute$volumefix"
}

update_networking () { 
#wifi
wf=$(nmcli -g GENERAl.STATE device show | grep -wo -m 1 "connected\|disconnected")
ss=$(iw dev wlp59s0 link | grep 'dBm$' | grep -Eoe '-[0-9]{2}' | awk '{print  ($1 > -50 ? 100 :($1 < -100 ? 0 : ($1+100)*2))}')

if [[ $wf = "connected" ]]; then wi="@@"
else wi="@~"
fi
	
#bluetooth
#devices_paired=$(bluetoothctl paired-devices | grep Device | cut -d ' ' -f 2)
#
#for device in $devices_paired; do
#device_info=$(bluetoothctl info "$device" | grep "Connected: yes" )
#[[ -z "$device_info" ]] || connected="$connected device connected"
#done
#
#bl=$([[ -z $connected ]] && printf '&~' || printf '&&')

#networking=" $wi/$bl"
networking=" $wi"
}
#update_backlight () { 
#	# you might need to change the path depending on your device
#	read -r actual_brightness </sys/class/backlight/intel_backlight/actual_brightness
#	read -r max_brightness </sys/class/backlight/intel_backlight/max_brightness
#	backlight="â˜€$((actual_brightness*100/max_brightness))%"
#}

# For calcurse users, refer https://github.com/pystardust/automeet
#update_event () { 
#	event="$(calcurse -n | sed 1d | \
#		sed -E "s_^ *\[(.*):(.*)\] ([^\t]*)\t?.*_[\1h \2m->\3]_")" 
#	[ "[]" = "$event" ] && event=""
#}


# modules that don't update on their own need to be run at the start for getting their initial value
update_vol
#update_backlight

display () { 
	#echo " ^c$color3^^b$color4^  $vol  ^c$color4^^b$color3^  $bat  ^c$color5^^b$color2^ $networking  ^c$color2^^b$color5^ $time "
	xsetroot -name " ^c$color3^^b$color4^  $vol  ^c$color4^^b$color3^  $bat  ^c$color5^^b$color2^ $networking  ^c$color2^^b$color5^ $time "
}

# SIGNALLING
# trap	"<function>;display"		"RTMIN+n"
trap	"update_vol;display"		"RTMIN"
#trap	"update_backlight;display" 	"RTMIN+1"
#trap	"update_bat;display" 		"RTMIN+2"
# to update it from external commands
## kill -m "$(cat ~/.cache/pidofbar)"
# where m = 34 + n

while true
do
	sleep 1 & wait && { 
	        source ~/.cache/wal/colors.sh
		# to update item ever n seconds with a offset of m
		## [ $((sec % n)) -eq m ] && udpate_item
		[ $((sec % 5 )) -eq 0 ] && update_time 	# update time every 5 seconds
		[ $((sec % 5 )) -eq 0 ] && update_vol 	# update time every 5 seconds
#		[ $((sec % 15)) -eq 0 ] && update_cpu 	# update cpu every 15 seconds
#		[ $((sec % 15)) -eq 0 ] && update_memory
		[ $((sec % 5)) -eq 0 ] && update_bat
		[ $((sec % 5)) -eq 0 ] && update_networking
#		[ $((sec % 3600)) -eq 2 ] && update_weather 
		#[ $((sec % 300)) -eq 1 ] && update_event

		# how often the display updates ( 5 seconds )
		[ $((sec % 5 )) -eq 0 ] && display
		sec=$((sec + 1))
	}
done 


